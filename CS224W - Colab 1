{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"CS224W - Colab 1","provenance":[{"file_id":"1p2s0on6nibUYhJnONBWEAwpBlue37Tcc","timestamp":1633218495031},{"file_id":"1b9rZIjD7MUEKwYbXZc3dchTBTpzdrvpd","timestamp":1632181904658},{"file_id":"1Jc5CAEGZIvY0vka3mBdf0tqn2TaJr2O1","timestamp":1610408674518},{"file_id":"1gc6u6hItUKY9uJt6GXHaneSYCMaGcxp1","timestamp":1610395347938},{"file_id":"1CqWY4pk7_VFxi8K8v4asr18ed0Hs8FVA","timestamp":1578441204356}],"collapsed_sections":[],"machine_shape":"hm"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XuXWJLEm2UWS"},"source":["# **CS224W - Colab 1**"]},{"cell_type":"markdown","metadata":{"id":"8gzsP50bF6Gb"},"source":["In this Colab, we will write a full pipeline for **learning node embeddings**.\n","We will go through the following 3 steps.\n","\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph.\n","\n","We will then work together to transform the graph structure into a PyTorch tensor, so that we can perform machine learning over the graph.\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model. For simplicity, our model here is simpler than DeepWalk / node2vec algorithms taught in the lecture. But it's still rewarding and challenging, as we will write it from scratch via PyTorch.\n","\n","Now let's get started!\n","\n","**Note**: Make sure to **sequentially run all the cells**, so that the intermediate variables / packages will carry over to the next cell"]},{"cell_type":"markdown","metadata":{"id":"Nwwq0nSdmsOL"},"source":["# 1 Graph Basics\n","To start, we will load a classic graph in network science, the [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club). We will explore multiple graph statistics for that graph."]},{"cell_type":"markdown","metadata":{"id":"FDkpByYYfSzb"},"source":["## Setup\n","We will heavily use NetworkX in this Colab."]},{"cell_type":"code","metadata":{"id":"VWPkJjPAfVNW","executionInfo":{"status":"ok","timestamp":1633550020007,"user_tz":240,"elapsed":486,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}}},"source":["import networkx as nx"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VqUnYT5qUZYh"},"source":["## Zachary's karate club network\n","\n","The [Karate Club Network](https://en.wikipedia.org/wiki/Zachary%27s_karate_club) is a graph describes a social network of 34 members of a karate club and documents links between members who interacted outside the club."]},{"cell_type":"code","metadata":{"id":"VIETqEfrfy5Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550020009,"user_tz":240,"elapsed":18,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"f4038515-9612-4059-abbd-3588b0e51136"},"source":["G = nx.karate_club_graph()\n","\n","# G is an undirected graph\n","type(G)"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["networkx.classes.graph.Graph"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"hDvf3nm-ors4","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1633550020598,"user_tz":240,"elapsed":597,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"658d68ec-a912-49f4-e2bc-23998f2fea67"},"source":["# Visualize the graph\n","nx.draw(G, with_labels = True)"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"FX25Y1CrYmgN"},"source":["## Question 1: What is the average degree of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"AUhES1VYo3tB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550020599,"user_tz":240,"elapsed":31,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"2c5a82e9-c5dd-4a3f-8e89-23ec59d43e0d"},"source":["def average_degree(num_edges, num_nodes):\n","  # TODO: Implement this function that takes number of edges\n","  # and number of nodes, and returns the average node degree of \n","  # the graph. Round the result to nearest integer (for example \n","  # 3.3 will be rounded to 3 and 3.7 will be rounded to 4)\n","\n","  avg_degree = 0\n","\n","  ############# Your code here ############\n","  avg_degree = round(num_edges/num_nodes)\n","  #########################################\n","\n","  return avg_degree\n","\n","num_edges = G.number_of_edges()\n","num_nodes = G.number_of_nodes()\n","avg_degree = average_degree(num_edges, num_nodes)\n","print(\"Average degree of karate club network is {}\".format(avg_degree))"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Average degree of karate club network is 2\n"]}]},{"cell_type":"markdown","metadata":{"id":"Fk02fD4vYmZI"},"source":["## Question 2: What is the average clustering coefficient of the karate club network? (5 Points)"]},{"cell_type":"code","metadata":{"id":"k15XKEto1aYJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550020600,"user_tz":240,"elapsed":26,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"eead9604-5b5e-4b94-ebba-4150c4961df0"},"source":["def average_clustering_coefficient(G):\n","  # TODO: Implement this function that takes a nx.Graph\n","  # and returns the average clustering coefficient. Round \n","  # the result to 2 decimal places (for example 3.333 will\n","  # be rounded to 3.33 and 3.7571 will be rounded to 3.76)\n","\n","  avg_cluster_coef = 0\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: Please use the appropriate NetworkX clustering function\n","  total, count = 0.0, 0\n","\n","  for _, cluster_coef in nx.clustering(G).items():\n","    count += 1\n","    total += cluster_coef\n","\n","  avg_cluster_coef = round(total/count, 2)\n","  #########################################\n","\n","  return avg_cluster_coef\n","\n","avg_cluster_coef = average_clustering_coefficient(G)\n","print(\"Average clustering coefficient of karate club network is {}\".format(avg_cluster_coef))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Average clustering coefficient of karate club network is 0.57\n"]}]},{"cell_type":"markdown","metadata":{"id":"zghQ-AhXYmP4"},"source":["## Question 3: What is the PageRank value for node 0 (node with id 0) after one PageRank iteration? (5 Points)\n","\n","Please complete the code block by implementing the PageRank equation: $r_j = \\sum_{i \\rightarrow j} \\beta \\frac{r_i}{d_i} + (1 - \\beta) \\frac{1}{N}$"]},{"cell_type":"code","metadata":{"id":"BOGdWjNc6O7x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550020601,"user_tz":240,"elapsed":21,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"85d450bf-a9fe-4343-cb15-7a6a3963c92b"},"source":["def one_iter_pagerank(G, beta, r0, node_id):\n","  # TODO: Implement this function that takes a nx.Graph, beta, r0 and node id.\n","  # The return value r1 is one interation PageRank value for the input node.\n","  # Please round r1 to 2 decimal places.\n","\n","  r1 = 0\n","\n","  ############# Your code here ############\n","  ## Note: \n","  ## 1: You should not use nx.pagerank\n","  N = G.number_of_nodes()\n","\n","  for neighbor in nx.neighbors(G, node_id):\n","    d_i = len(list(nx.neighbors(G, neighbor)))\n","    r1 += (beta * (r0 / d_i))\n","    \n","  r1 += ((1- beta) * (1 / N))\n","\n","  r1 = round(r1, 2)\n","  #########################################\n","\n","  return r1\n","\n","beta = 0.8\n","r0 = 1 / G.number_of_nodes()\n","node = 0\n","r1 = one_iter_pagerank(G, beta, r0, node)\n","print(\"The PageRank value for node 0 after one iteration is {}\".format(r1))"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["The PageRank value for node 0 after one iteration is 0.13\n"]}]},{"cell_type":"markdown","metadata":{"id":"icTcOULeYmIu"},"source":["## Question 4: What is the (raw) closeness centrality for the karate club network node 5? (5 Points)\n","\n","The equation for closeness centrality is $c(v) = \\frac{1}{\\sum_{u \\neq v}\\text{shortest path length between } u \\text{ and } v}$"]},{"cell_type":"code","metadata":{"id":"XbCsq_tl-3ok","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550020602,"user_tz":240,"elapsed":18,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"3663d2ec-96c3-47a9-ad4a-b48168a43a05"},"source":["def closeness_centrality(G, node=5):\n","  # TODO: Implement the function that calculates closeness centrality \n","  # for a node in karate club network. G is the input karate club \n","  # network and node is the node id in the graph. Please round the \n","  # closeness centrality result to 2 decimal places.\n","\n","  closeness = 0\n","\n","  ## Note:\n","  ## 1: You can use networkx closeness centrality function.\n","  ## 2: Notice that networkx closeness centrality returns the normalized \n","  ## closeness directly, which is different from the raw (unnormalized) \n","  ## one that we learned in the lecture.\n","  sum = 0\n","\n","  for n in G.nodes():\n","    path_length = len(nx.shortest_path(G, node, n)) - 1\n","    sum += path_length\n","\n","  closeness = round(1/sum, 2)\n","  #########################################\n","\n","  return closeness\n","\n","node = 5\n","closeness = closeness_centrality(G, node=node)\n","print(\"The node 5 has closeness centrality {}\".format(closeness))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["The node 5 has closeness centrality 0.01\n"]}]},{"cell_type":"markdown","metadata":{"id":"-MxvowibYl4x"},"source":["# 2 Graph to Tensor\n","We will then work together to transform the graph $G$ into a PyTorch tensor, so that we can perform machine learning over the graph."]},{"cell_type":"markdown","metadata":{"id":"eDA8PosrA-9V"},"source":["## Setup\n","Check if PyTorch is properly installed"]},{"cell_type":"code","metadata":{"id":"ntuPVat_BAf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550024424,"user_tz":240,"elapsed":3836,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"bafb1329-dd43-45c5-f545-6f170a7deb6b"},"source":["import torch\n","print(torch.__version__)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["1.9.0+cu102\n"]}]},{"cell_type":"markdown","metadata":{"id":"fko_2wSKYlun"},"source":["## PyTorch tensor basics\n","\n","We can generate PyTorch tensor with all zeros, ones or random values."]},{"cell_type":"code","metadata":{"id":"W2ySw3m-A9qF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550024682,"user_tz":240,"elapsed":287,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"753adbe6-509a-40b5-de0c-ffcaeafba0d4"},"source":["# Generate 3 x 4 tensor with all ones\n","ones = torch.ones(3, 4)\n","print(ones)\n","\n","# Generate 3 x 4 tensor with all zeros\n","zeros = torch.zeros(3, 4)\n","print(zeros)\n","\n","# Generate 3 x 4 tensor with random values on the interval [0, 1)\n","random_tensor = torch.rand(3, 4)\n","print(random_tensor)\n","\n","# Get the shape of the tensor\n","print(ones.shape)"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])\n","tensor([[0., 0., 0., 0.],\n","        [0., 0., 0., 0.],\n","        [0., 0., 0., 0.]])\n","tensor([[0.4192, 0.6860, 0.7058, 0.7212],\n","        [0.3004, 0.0569, 0.6634, 0.2536],\n","        [0.3873, 0.1973, 0.3421, 0.7523]])\n","torch.Size([3, 4])\n"]}]},{"cell_type":"markdown","metadata":{"id":"x8mp66eHBxWC"},"source":["PyTorch tensor contains elements for a single data type, the `dtype`."]},{"cell_type":"code","metadata":{"id":"rQiOvKJJBwq4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550024683,"user_tz":240,"elapsed":39,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"e1baa82e-3840-4aca-d1ba-94b09a2ee7bf"},"source":["# Create a 3 x 4 tensor with all 32-bit floating point zeros\n","zeros = torch.zeros(3, 4, dtype=torch.float32)\n","print(zeros.dtype)\n","\n","# Change the tensor dtype to 64-bit integer\n","zeros = zeros.type(torch.long)\n","print(zeros.dtype)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.float32\n","torch.int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"I9EfegIRDkk2"},"source":["## Question 5: Get the edge list of the karate club network and transform it into `torch.LongTensor`. What is the `torch.sum` value of `pos_edge_index` tensor? (10 Points)"]},{"cell_type":"code","metadata":{"id":"kEtVxMFID3ZT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550024701,"user_tz":240,"elapsed":49,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"5f677962-0535-4e75-b7ef-bc4e71eadc1d"},"source":["def graph_to_edge_list(G):\n","  # TODO: Implement the function that returns the edge list of\n","  # an nx.Graph. The returned edge_list should be a list of tuples\n","  # where each tuple is a tuple representing an edge connected \n","  # by two nodes.\n","\n","  edge_list = []\n","\n","  ############# Your code here ############\n","  for edge in G.edges():\n","    edge_list.append(edge)\n","  #########################################\n","\n","  return edge_list\n","\n","def edge_list_to_tensor(edge_list):\n","  # TODO: Implement the function that transforms the edge_list to\n","  # tensor. The input edge_list is a list of tuples and the resulting\n","  # tensor should have the shape [2 x len(edge_list)].\n","\n","  edge_index = torch.tensor([])\n","\n","  ############# Your code here ############\n","  edge_array = []\n","  for edge in edge_list:\n","    edge_array.append(list(edge))\n","\n","  edge_index = torch.tensor(edge_array)\n","  edge_index = torch.transpose(edge_index, 0, 1)\n","  #########################################\n","\n","  return edge_index\n","\n","pos_edge_list = graph_to_edge_list(G)\n","pos_edge_index = edge_list_to_tensor(pos_edge_list)\n","print(\"The pos_edge_index tensor has shape {}\".format(pos_edge_index.shape))\n","print(\"The pos_edge_index tensor has sum value {}\".format(torch.sum(pos_edge_index)))"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["The pos_edge_index tensor has shape torch.Size([2, 78])\n","The pos_edge_index tensor has sum value 2535\n"]}]},{"cell_type":"markdown","metadata":{"id":"UBL-ZmdHWqIu"},"source":["## Question 6: Please implement following function that samples negative edges. Then answer which edges (edge_1 to edge_5) can be potential negative edges in the karate club network? (10 Points)"]},{"cell_type":"code","metadata":{"id":"9N8VT1f8-IJ8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550024703,"user_tz":240,"elapsed":41,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"53ad60eb-ef62-4ed1-d31f-2ea57f792712"},"source":["import random\n","\n","def sample_negative_edges(G, num_neg_samples):\n","  # TODO: Implement the function that returns a list of negative edges.\n","  # The number of sampled negative edges is num_neg_samples. You do not\n","  # need to consider the corner case when the number of possible negative edges\n","  # is less than num_neg_samples. It should be ok as long as your implementation \n","  # works on the karate club network. In this implementation, self loops should \n","  # not be considered as either a positive or negative edge. Also, notice that \n","  # the karate club network is an undirected graph, if (0, 1) is a positive \n","  # edge, do you think (1, 0) can be a negative one?\n","\n","  neg_edge_list = []\n","\n","  ############# Your code here ############\n","  edge_list = graph_to_edge_list(G)\n","  node_list = [n for n in G]\n","\n","  i = 0\n","\n","  while (i < num_neg_samples):\n","    i += 1\n","\n","    keep_going = True\n","\n","    while (keep_going):\n","      u = random.choice(node_list)\n","      v = random.choice(node_list)\n","\n","      while (u == v):\n","        v = random.choice(node_list)\n","      \n","      edge = (u, v)\n","\n","      if (not G.has_edge(u,v) and not G.has_edge(v,u) and edge not in neg_edge_list):\n","        keep_going = False\n","        neg_edge_list.append(edge)\n","  #########################################\n","\n","  return neg_edge_list\n","\n","# Sample 78 negative edges\n","neg_edge_list = sample_negative_edges(G, len(pos_edge_list))\n","\n","# Transform the negative edge list to tensor\n","neg_edge_index = edge_list_to_tensor(neg_edge_list)\n","print(\"The neg_edge_index tensor has shape {}\".format(neg_edge_index.shape))\n","\n","# Which of following edges can be negative ones?\n","edge_1 = (7, 1)\n","edge_2 = (1, 33)\n","edge_3 = (33, 22)\n","edge_4 = (0, 4)\n","edge_5 = (4, 2)\n","\n","############# Your code here ############\n","## Note:\n","## 1: For each of the 5 edges, print whether it can be negative edge\n","rev_edge_1 = edge_1[::-1]\n","rev_edge_2 = edge_2[::-1]\n","rev_edge_3 = edge_3[::-1]\n","rev_edge_4 = edge_4[::-1]\n","rev_edge_5 = edge_5[::-1]\n","\n","if edge_1 not in pos_edge_list and rev_edge_1 not in pos_edge_list:\n","  print(\"edge_1 can be a negative edge\")\n","else:\n","  print(\"edge_1 cannot be a negative edge\")\n","\n","if edge_2 not in pos_edge_list and rev_edge_2 not in pos_edge_list:\n","  print(\"edge_2 can be a negative edge\")\n","else:\n","  print(\"edge_2 cannot be a negative edge\")\n","\n","if edge_3 not in pos_edge_list and rev_edge_3 not in pos_edge_list:\n","  print(\"edge_3 can be a negative edge\")\n","else:\n","  print(\"edge_3 cannot be a negative edge\")\n","\n","if edge_4 not in pos_edge_list and rev_edge_4 not in pos_edge_list:\n","  print(\"edge_4 can be a negative edge\")\n","else:\n","  print(\"edge_4 cannot be a negative edge\")\n","\n","if edge_5 not in pos_edge_list and rev_edge_5 not in pos_edge_list:\n","  print(\"edge_5 can be a negative edge\")\n","else:\n","  print(\"edge_5 cannot be a negative edge\")\n","#########################################"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["The neg_edge_index tensor has shape torch.Size([2, 78])\n","edge_1 cannot be a negative edge\n","edge_2 can be a negative edge\n","edge_3 cannot be a negative edge\n","edge_4 cannot be a negative edge\n","edge_5 can be a negative edge\n"]}]},{"cell_type":"markdown","metadata":{"id":"Wk9Q-a-9qGsw"},"source":["# 3 Node Emebedding Learning\n","\n","Finally, we will finish the first learning algorithm on graphs: a node embedding model.\n"]},{"cell_type":"markdown","metadata":{"id":"NDBxRQcZ_dUH"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"Lnqn9H6s_ehX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550025629,"user_tz":240,"elapsed":959,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"00ce110a-16b2-4e1a-a933-45c32e1ef319"},"source":["import torch\n","import torch.nn as nn\n","import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","\n","print(torch.__version__)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["1.9.0+cu102\n"]}]},{"cell_type":"markdown","metadata":{"id":"6gomAf8vxq0R"},"source":["To write our own node embedding learning methods, we'll heavily use the [`nn.Embedding`](https://pytorch.org/docs/stable/generated/torch.nn.Embedding.html) module in PyTorch. Let's see how to use `nn.Embedding`:"]},{"cell_type":"code","metadata":{"id":"aRiWGuLAx5yx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550025630,"user_tz":240,"elapsed":25,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"a709ea08-5059-4247-a31d-c05d3ae29f15"},"source":["# Initialize an embedding layer\n","# Suppose we want to have embedding for 4 items (e.g., nodes)\n","# Each item is represented with 8 dimensional vector\n","\n","emb_sample = nn.Embedding(num_embeddings=4, embedding_dim=8)\n","print('Sample embedding layer: {}'.format(emb_sample))"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample embedding layer: Embedding(4, 8)\n"]}]},{"cell_type":"markdown","metadata":{"id":"bS9qQfeujEVh"},"source":["We can select items from the embedding matrix, by using Tensor indices"]},{"cell_type":"code","metadata":{"id":"9AGIfP4QEDr8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550025631,"user_tz":240,"elapsed":21,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"dcaf3626-9d19-45e0-caf3-6d12bf7af26b"},"source":["# Select an embedding in emb_sample\n","id = torch.LongTensor([1])\n","print(emb_sample(id))\n","\n","# Select multiple embeddings\n","ids = torch.LongTensor([1, 3])\n","print(emb_sample(ids))\n","\n","# Get the shape of the embedding weight matrix\n","shape = emb_sample.weight.data.shape\n","print(shape)\n","\n","# Overwrite the weight to tensor with all ones\n","emb_sample.weight.data = torch.ones(shape)\n","\n","# Let's check if the emb is indeed initilized\n","ids = torch.LongTensor([0, 3])\n","print(emb_sample(ids))"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.7520, -0.5038,  0.8823,  0.6169,  0.9937,  0.2564, -0.7179, -0.3385]],\n","       grad_fn=<EmbeddingBackward>)\n","tensor([[-0.7520, -0.5038,  0.8823,  0.6169,  0.9937,  0.2564, -0.7179, -0.3385],\n","        [-0.8996,  0.5387, -0.7654,  0.4403, -1.3316, -1.0876, -0.0722,  1.9995]],\n","       grad_fn=<EmbeddingBackward>)\n","torch.Size([4, 8])\n","tensor([[1., 1., 1., 1., 1., 1., 1., 1.],\n","        [1., 1., 1., 1., 1., 1., 1., 1.]], grad_fn=<EmbeddingBackward>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"8MjBuDKaKIsM"},"source":["Now, it's your time to create node embedding matrix for the graph we have!\n","- We want to have **16 dimensional** vector for each node in the karate club network.\n","- We want to initalize the matrix under **uniform distribution**, in the range of $[0, 1)$. We suggest you using [`torch.rand`](https://pytorch.org/docs/stable/generated/torch.rand.html)."]},{"cell_type":"code","metadata":{"id":"hMszSwRPKGn1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550507851,"user_tz":240,"elapsed":254,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"2dfb5169-b49c-4124-84ae-74974c6e4b22"},"source":["# Please do not change / reset the random seed\n","torch.manual_seed(1)\n","\n","def create_node_emb(num_node=34, embedding_dim=16):\n","  # TODO: Implement this function that will create the node embedding matrix.\n","  # A torch.nn.Embedding layer will be returned. You do not need to change \n","  # the values of num_node and embedding_dim. The weight matrix of returned \n","  # layer should be initialized under uniform distribution. \n","\n","  emb = None\n","\n","  ############# Your code here ############\n","  emb = nn.Embedding(num_embeddings=num_node, embedding_dim=embedding_dim)\n","  emb.weight.data = torch.rand(num_node, embedding_dim)\n","  #########################################\n","\n","  return emb\n","\n","emb = create_node_emb()\n","ids = torch.LongTensor([0, 3])\n","\n","# Print the embedding layer\n","print(\"Embedding: {}\".format(emb))\n","\n","# An example that gets the embeddings for node 0 and 3\n","print(emb(ids))"],"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Embedding: Embedding(34, 16)\n","tensor([[0.2114, 0.7335, 0.1433, 0.9647, 0.2933, 0.7951, 0.5170, 0.2801, 0.8339,\n","         0.1185, 0.2355, 0.5599, 0.8966, 0.2858, 0.1955, 0.1808],\n","        [0.7486, 0.6546, 0.3843, 0.9820, 0.6012, 0.3710, 0.4929, 0.9915, 0.8358,\n","         0.4629, 0.9902, 0.7196, 0.2338, 0.0450, 0.7906, 0.9689]],\n","       grad_fn=<EmbeddingBackward>)\n"]}]},{"cell_type":"markdown","metadata":{"id":"4QfoANibTzyh"},"source":["## Visualize the initial node embeddings\n","One good way to understand an embedding matrix, is to visualize it in a 2D space.\n","Here, we have implemented an embedding visualization function for you.\n","We first do PCA to reduce the dimensionality of embeddings to a 2D space.\n","Then we visualize each point, colored by the community it belongs to."]},{"cell_type":"code","metadata":{"id":"_LCoIkarhfYD","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1633550025857,"user_tz":240,"elapsed":237,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"16359619-bee1-4744-94d9-5a71184c98c4"},"source":["def visualize_emb(emb):\n","  X = emb.weight.data.numpy()\n","  pca = PCA(n_components=2)\n","  components = pca.fit_transform(X)\n","  plt.figure(figsize=(6, 6))\n","  club1_x = []\n","  club1_y = []\n","  club2_x = []\n","  club2_y = []\n","  for node in G.nodes(data=True):\n","    if node[1]['club'] == 'Mr. Hi':\n","      club1_x.append(components[node[0]][0])\n","      club1_y.append(components[node[0]][1])\n","    else:\n","      club2_x.append(components[node[0]][0])\n","      club2_y.append(components[node[0]][1])\n","  plt.scatter(club1_x, club1_y, color=\"red\", label=\"Mr. Hi\")\n","  plt.scatter(club2_x, club2_y, color=\"blue\", label=\"Officer\")\n","  plt.legend()\n","  plt.show()\n","\n","# Visualize the initial random embeddding\n","visualize_emb(emb)"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"bQIyuEz9ANb2"},"source":["## Question 7: Training the embedding! What is the best performance you can get? Please report both the best loss and accuracy on Gradescope. (20 Points)\n","\n","We want to optimize our embeddings for the task of classifying edges as positive or negative. Given an edge and the embeddings for each node, the dot product of the embeddings, followed by a sigmoid, should give us the likelihood of that edge being either positive (output of sigmoid > 0.5) or negative (output of sigmoid < 0.5).\n","\n","Note that we're using the functions you wrote in the previous questions, _as well as the variables initialized in previous cells_. If you're running into issues, make sure your answers to questions 1-6 are correct."]},{"cell_type":"code","metadata":{"id":"RDeQTNNxqH0j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633550528258,"user_tz":240,"elapsed":12839,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"fbfe4710-8012-4b41-83f7-14dc59156040"},"source":["from torch.optim import SGD\n","\n","def accuracy(pred, label):\n","  # TODO: Implement the accuracy function. This function takes the \n","  # pred tensor (the resulting tensor after sigmoid) and the label \n","  # tensor (torch.LongTensor). Predicted value greater than 0.5 will \n","  # be classified as label 1. Else it will be classified as label 0.\n","  # The returned accuracy should be rounded to 4 decimal places. \n","  # For example, accuracy 0.82956 will be rounded to 0.8296.\n","\n","  accu = 0.0\n","\n","  ############# Your code here ############\n","  for i in range(pred.shape[0]):\n","    y = 0\n","    \n","    if (pred[i] > 0.5):\n","      y = 1\n","    \n","    if (y == 0 and label[i] == 0) or (y == 1 and label[i] == 1):\n","      accu += 1.0\n","\n","  accu /= pred.shape[0]\n","\n","  accu = round(accu, 4)\n","  #########################################\n","\n","  return accu\n","\n","def train(emb, loss_fn, sigmoid, train_label, train_edge):\n","  # TODO: Train the embedding layer here. You can also change epochs and \n","  # learning rate. In general, you need to implement: \n","  # (1) Get the embeddings of the nodes in train_edge\n","  # (2) Dot product the embeddings between each node pair\n","  # (3) Feed the dot product result into sigmoid\n","  # (4) Feed the sigmoid output into the loss_fn\n","  # (5) Print both loss and accuracy of each epoch \n","  # (6) Update the embeddings using the loss and optimizer \n","  # (as a sanity check, the loss should decrease during training)\n","\n","  epochs = 1000\n","  learning_rate = 0.9\n","\n","  optimizer = SGD(emb.parameters(), lr=learning_rate, momentum=0.9)\n","\n","  for i in range(epochs):\n","    \n","    ############# Your code here ############\n","    optimizer.zero_grad()\n","    pred_label = torch.zeros(train_label.shape[0], dtype=torch.float32)\n","    \n","    for j in range(pred_label.shape[0]):\n","      # (1) Get the embeddings of the nodes in train_edge\n","      u = train_edge[0][j]\n","      v = train_edge[1][j]\n","      f_u = emb(u)\n","      f_v = emb(v)\n","      # print(f_u)\n","      # print(f_v)\n","\n","      # (2) Dot product the embeddings between each node pair\n","      u_dot_v = torch.dot(f_u, f_v)\n","\n","      # (3) Feed the dot product result into sigmoid\n","      sig = sigmoid(u_dot_v)\n","      # print(u_dot_v)\n","      # print(sig)\n","      \n","      pred_label[j] = sig\n","\n","    # (4) Feed the sigmoid output into the loss_fn\n","    loss = loss_fn(pred_label, train_label)\n","\n","    # (6) Update the embeddings using the loss and optimizer \n","    loss.backward()\n","    optimizer.step()\n","\n","    # (5) Print both loss and accuracy of each epoch\n","    if (i % 100 == 0 or i == epochs - 1):\n","      acc = accuracy(pred_label, train_label)\n","      print(\"Epoch {}, Acc = {}, Loss = {}\".format(i, acc, loss))\n","     \n","    #########################################\n","\n","loss_fn = nn.BCELoss()\n","sigmoid = nn.Sigmoid()\n","\n","# Generate the positive and negative labels\n","pos_label = torch.ones(pos_edge_index.shape[1], )\n","neg_label = torch.zeros(neg_edge_index.shape[1], )\n","\n","# Concat positive and negative labels into one tensor\n","train_label = torch.cat([pos_label, neg_label], dim=0)\n","\n","# Concat positive and negative edges into one tensor\n","# Since the network is very small, we do not split the edges into val/test sets\n","train_edge = torch.cat([pos_edge_index, neg_edge_index], dim=1)\n","\n","train(emb, loss_fn, sigmoid, train_label, train_edge)"],"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0, Acc = 0.5, Loss = 2.0184853076934814\n","Epoch 100, Acc = 1.0, Loss = 0.004466224927455187\n","Epoch 200, Acc = 1.0, Loss = 0.002038773149251938\n","Epoch 300, Acc = 1.0, Loss = 0.0012968587689101696\n","Epoch 400, Acc = 1.0, Loss = 0.0009393537184223533\n","Epoch 500, Acc = 1.0, Loss = 0.0007308158092200756\n","Epoch 600, Acc = 1.0, Loss = 0.0005950090126134455\n","Epoch 700, Acc = 1.0, Loss = 0.0004999375669285655\n","Epoch 800, Acc = 1.0, Loss = 0.00042988950735889375\n","Epoch 900, Acc = 1.0, Loss = 0.00037625458207912743\n","Epoch 999, Acc = 1.0, Loss = 0.0003343380521982908\n"]}]},{"cell_type":"markdown","metadata":{"id":"WX2PSXnTDiNi"},"source":["## Visualize the final node embeddings\n","Visualize your final embedding here! \n","You can visually compare the figure with the previous embedding figure. \n","After training, you should oberserve that the two classes are more evidently separated. \n","This is a great sanitity check for your implementation as well."]},{"cell_type":"code","metadata":{"id":"MtNgl4VhYKow","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1633550536873,"user_tz":240,"elapsed":248,"user":{"displayName":"Daniel Patrick Ryan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17137828117506069121"}},"outputId":"8467ee37-0944-4f32-f23e-188aed2dd595"},"source":["# Visualize the final learned embedding\n","visualize_emb(emb)"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FTNyrAoSVeq9"},"source":["# Submission"]},{"cell_type":"markdown","metadata":{"id":"E_E7J_GkVhY_"},"source":["In order to get credit, you must go submit your answers on Gradescope."]}]}